// Code generated by hertz generator.

package chat

import (
	"context"
	"fmt"
	"gitee.com/derrickball/douyin/app/api/biz/handler/pack"
	"gitee.com/derrickball/douyin/app/api/biz/mw"
	"log"

	"gitee.com/derrickball/douyin/app/api/biz/model/chat"
	"gitee.com/derrickball/douyin/app/api/biz/rpc"
	"gitee.com/derrickball/douyin/app/chat/kitex_gen/chat_rpc"
	"gitee.com/derrickball/douyin/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FriendList .
// @router /douyin/relation/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req chat.RelationFriendListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		log.Println(req.GetUserId())
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if len(req.GetToken()) == 0 {
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.AuthorizationFailedErr))
		return
	}
	//if len(fmt.Sprint(req.GetUserId())) == 0 {
	//	c.JSON(consts.StatusOK, errno.MConvertErr(errno.ParamErr))
	//	return
	//}
	uid := c.GetInt64(mw.AuthMiddleware.IdentityKey)
	log.Printf("当前查询id是 %+v, 当前用户是%+v\n", req.GetUserId(), uid)

	response, err := rpc.FriendList(ctx, &chat_rpc.RPCFriendListReq{
		UserId: uid,
	})

	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}

	// 封装pack
	resp := &chat.RelationFriendListResp{
		StatusCode: &errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
		UserList:   pack.UserList(response.GetUserList()),
	}

	c.JSON(consts.StatusOK, resp)
}

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	log.Println("聊天记录获取")
	var err error
	var req chat.MessageChatReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if len(req.GetToken()) == 0 {
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.AuthorizationFailedErr))
		return
	}
	if len(fmt.Sprint(req.GetToUserId())) == 0 {
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.ParamErr))
		return
	}

	uid := c.GetInt64(mw.AuthMiddleware.IdentityKey)
	log.Printf("聊天记录-当前用户id是 %+v, 目标用户是%+v\n", uid, req.GetToUserId())
	response, err := rpc.ChatList(ctx, &chat_rpc.RPCMessageChatReq{
		ToUserId: req.GetToUserId(),
		UserId:   uid,
	})

	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}

	// 封装pack
	resp := &chat.MessageChatResp{
		StatusCode:  &errno.Success.ErrCode,
		StatusMsg:   &errno.Success.ErrMsg,
		MessageList: pack.MessageList(response.GetMessageList()),
	}

	c.JSON(consts.StatusOK, resp)
}

// Action .
// @router /douyin/message/action/ [POST]
func Action(ctx context.Context, c *app.RequestContext) {
	var err error
	var req chat.RelationActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	if len(req.GetToken()) == 0 {
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.AuthorizationFailedErr))
		return
	}
	if len(fmt.Sprint(req.GetToUserId())) == 0 {
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.ParamErr))
		return
	}
	uid := c.GetInt64(mw.AuthMiddleware.IdentityKey)
	log.Printf("%+v 向%+v 发送一条消息", uid, req.GetToUserId())
	switch req.GetActionType() {
	case 1:
		_, err := rpc.CreateMessage(ctx, &chat_rpc.RPCMessageCreateReq{
			ToUserId:   req.GetToUserId(),
			FromUserId: uid,
			Content:    req.GetContent(),
		})
		if err != nil {
			c.JSON(consts.StatusBadRequest, err.Error())
			return
		}
	default:
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.ParamErr))
		return
	}

	resp := &chat.RelationActionResp{
		StatusCode: &errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
	}

	c.JSON(consts.StatusOK, resp)
}
