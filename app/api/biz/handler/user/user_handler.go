// Code generated by hertz generator.

package user

import (
	"context"
	"gitee.com/derrickball/douyin/app/api/biz/model/common"
	"gitee.com/derrickball/douyin/app/api/biz/model/user"
	"gitee.com/derrickball/douyin/app/api/biz/mw"
	"gitee.com/derrickball/douyin/app/api/biz/rpc"
	"gitee.com/derrickball/douyin/app/user/kitex_gen/user_rpc"
	"gitee.com/derrickball/douyin/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log"
	"time"
)

// Register .
// @router /douyin/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	log.Printf("--------------user注册方法-------------, time is %v", time.Now())
	var err error
	var req user.UserRegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}
	log.Printf("--------------user注册方法获取username,password-------------, time is %v", time.Now())

	if len(*req.Username) == 0 || len(*req.Password) == 0 {
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.ParamErr))
		return
	}

	err = rpc.CreateUser(ctx, &user_rpc.RPCCreateUserReq{
		Username: *req.Username,
		Password: *req.Password,
	})
	log.Printf("--------------user注册方法获取创建用户成功-------------, time is %v", time.Now())
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}

	mw.AuthMiddleware.LoginHandler(ctx, c)
}

// User .
// @router /douyin/user/ [GET]
func User(ctx context.Context, c *app.RequestContext) {
	log.Printf("--------------获取用户信息-------------, time is %v", time.Now())
	var err error
	var req user.UserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId := *req.UserId
	log.Printf("--------------获取用户信息，当前查询用户id:%v-------------, time is %v", userId, time.Now())
	MyUserId := c.GetInt64(mw.AuthMiddleware.IdentityKey)
	userModel := rpc.QueryUser(ctx, &user_rpc.RPCQueryUserReq{
		TargetUserId: userId,
		MyUserId:     MyUserId,
	})

	log.Printf("--------------查询用户成功，查询用户模型:%+v-------------, time is %v", userModel, time.Now())

	resp := new(user.UserResp)

	//TODO 查询isFollow
	userVo := &common.User{
		Id:            userModel.Id,
		Name:          userModel.Name,
		FollowCount:   &userModel.FollowCount,
		FollowerCount: &userModel.FollowerCount,
		IsFollow:      userModel.IsFollow,
	}
	resp = &user.UserResp{
		StatusCode: &errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
		User:       userVo,
	}

	c.JSON(consts.StatusOK, resp)
}
