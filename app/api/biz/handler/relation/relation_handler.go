// Code generated by hertz generator.

package relation

import (
	"context"
	common "gitee.com/derrickball/douyin/app/api/biz/model/common"
	relation "gitee.com/derrickball/douyin/app/api/biz/model/relation"
	"gitee.com/derrickball/douyin/app/relation/kitex_gen/relation_rpc"
	"log"
	"strconv"

	"gitee.com/derrickball/douyin/app/api/biz/mw"
	"gitee.com/derrickball/douyin/app/api/biz/rpc"
	"gitee.com/derrickball/douyin/pkg/errno"
	"gitee.com/derrickball/douyin/pkg/util"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Action .
// @router /douyin/relation/action/ [POST]
func Action(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, errno.MConvertErr(err))
		return
	}
	userID := c.GetInt64(mw.AuthMiddleware.IdentityKey)
	log.Printf(strconv.FormatInt(userID, 10))
	err = rpc.Action(ctx, &relation_rpc.RPCRelationActionReq{
		ToUserId:   *req.ToUserId,
		FollowerId: userID,
		ActionType: int32(*req.ActionType),
	})
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}
	c.JSON(consts.StatusOK, map[string]interface{}{
		"status_code": errno.Success.ErrCode,
		"status_msg":  errno.Success.ErrMsg,
	})
}

// FollowList .
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}
	userID := c.GetInt64(mw.AuthMiddleware.IdentityKey)
	resp, err := rpc.FollowList(ctx, &relation_rpc.RPCRelationFollowListReq{
		UserId:     userID,
		FollowerId: *req.UserId,
	})
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}
	//resp := new(relation.RelationFollowListResp)
	users := make([]*common.User, 0)
	for _, v := range resp.FollowList {
		users = append(users, &common.User{
			Id:            v.Id,
			Name:          v.Name,
			FollowCount:   &v.FollowCount,
			FollowerCount: &v.FollowerCount,
			IsFollow:      v.IsFollow,
		})
	}
	c.JSON(consts.StatusOK, &relation.RelationFollowListResp{
		StatusCode: &errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
		UserList:   users,
	})
}

// FollowerList .
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowerListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, err.Error())
		return
	}
	t, _ := mw.AuthMiddleware.ParseTokenString(*req.Token)
	userID := util.ParseToken(t)
	resp, err := rpc.FollowerList(ctx, &relation_rpc.RPCRelationFollowerListReq{
		UserId:   userID,
		ToUserId: *req.UserId,
	})
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}
	users := make([]*common.User, 0)
	for _, v := range resp.FollowerList {
		users = append(users, &common.User{
			Id:            v.Id,
			Name:          v.Name,
			FollowCount:   &v.FollowCount,
			FollowerCount: &v.FollowerCount,
			IsFollow:      v.IsFollow,
		})
	}
	c.JSON(consts.StatusOK, &relation.RelationFollowerListResp{
		StatusCode: &errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
		UserList:   users,
	})
}

//// FriendList .
//// @router /douyin/relation/friend/list/ [GET]
//func FriendList(ctx context.Context, c *app.RequestContext) {
//	var err error
//	var req relation.RelationFriendListReq
//	err = c.BindAndValidate(&req)
//	if err != nil {
//		c.String(consts.StatusBadRequest, err.Error())
//		return
//	}
//
//	resp := new(relation.RelationFriendListResp)
//
//	c.JSON(consts.StatusOK, resp)
//}
