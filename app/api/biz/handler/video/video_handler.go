// Code generated by hertz generator.

package video

import (
	"context"
	"fmt"
	"gitee.com/derrickball/douyin/app/api/biz/handler/pack"
	"gitee.com/derrickball/douyin/app/api/biz/model/common"
	"gitee.com/derrickball/douyin/app/api/biz/rpc"
	"gitee.com/derrickball/douyin/app/video/kitex_gen/video_rpc"
	"gitee.com/derrickball/douyin/pkg/config"
	"gitee.com/derrickball/douyin/pkg/constants"
	"gitee.com/derrickball/douyin/pkg/errno"
	"gitee.com/derrickball/douyin/pkg/util"
	"log"
	"os"
	"time"

	video "gitee.com/derrickball/douyin/app/api/biz/model/video"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Feed .
// @router /douyin/feed [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	log.Printf("--------------视频feed流-------------, time is %v", time.Now())
	var err error
	var req video.FeedReq
	err = c.BindAndValidate(&req)
	if req.LatestTime != nil {
		log.Printf("----Feed流查询时间:%+v", *req.LatestTime)
	}
	if req.Token != nil {
		log.Printf("----Feed流获得的Token:%+v")
	}
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}
	if req.LatestTime == nil {
		//log.Println("搜索最新时间")
		req.LatestTime = new(int64)
		*req.LatestTime = time.Now().Unix()
	} else if *req.LatestTime == 0 {
		*req.LatestTime = time.Now().Unix()
	}
	if *req.LatestTime < 0 {
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.ParamErr))
		return
	}

	userID, _ := c.Get(constants.IdentityKey)

	var id int64
	if userID == nil {
		id = 0
	} else {
		id = userID.(int64)
	}

	videos, nextTime, err := rpc.QueryVideo(ctx, &video_rpc.QueryVideoReq{
		LatestTime: *req.LatestTime,
		UserId:     id,
	})
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}

	resp := &video.FeedResp{
		StatusCode: &errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
		VideoList:  pack.Videos(videos),
		NextTime:   &nextTime,
	}

	c.JSON(consts.StatusOK, resp)
}

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	log.Printf("--------------视频发布-------------, time is %v", time.Now())
	var err error
	var req video.PublishActionReq
	//err = c.BindAndValidate(&req)
	//if err != nil {
	//	c.JSON(consts.StatusOK, errno.MConvertErr(err))
	//	return
	//}
	file, err := c.FormFile("data")
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}
	title := c.PostForm("title")
	req.Title = &title
	if len(*req.Title) == 0 {
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.ParamErr))
		return
	}
	userID, _ := c.Get(constants.IdentityKey)
	path := fmt.Sprintf("%s%s.mp4", config.Config.ResConfig.TmpDir, util.GetFileName(userID.(int64), *req.Title))
	req.DataPath = &path

	err = c.SaveUploadedFile(file, path)
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.ParamErr))
		return
	}
	defer func(name string) {
		_ = os.Remove(name)
	}(*req.DataPath)

	coverUrl, err := util.GetCoverFromVideo(userID.(int64), *req.Title, *req.DataPath)
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}
	client, err := util.GetOSSClient()
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}
	playUrl, err := client.UploadFile(util.GetFileName(userID.(int64), *req.Title)+".mp4", *req.DataPath)
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}
	err = rpc.CreateVideo(ctx, &video_rpc.CreateVideoReq{
		Title:    *req.Title,
		PlayUrl:  playUrl,
		CoverUrl: coverUrl,
		UserId:   userID.(int64),
	})
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}

	c.JSON(consts.StatusOK, errno.MConvertErr(errno.Success))
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	log.Printf("--------------视频列表------------, time is %v", time.Now())
	var err error
	var req video.PublishListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}

	userID, _ := c.Get(constants.IdentityKey)

	if userID == nil {
		resp := &video.PublishListResp{
			StatusCode: &errno.Success.ErrCode,
			StatusMsg:  &errno.Success.ErrMsg,
			VideoList:  []*common.Video{},
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	if *req.UserId <= 0 {
		c.JSON(consts.StatusOK, errno.MConvertErr(errno.ParamErr))
		return
	}

	videos, err := rpc.QueryVideoByUser(ctx, &video_rpc.QueryVideoByUserReq{
		UserId: *req.UserId,
	})
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}

	resp := &video.PublishListResp{
		StatusCode: &errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
		VideoList:  pack.Videos(videos),
	}
	c.JSON(consts.StatusOK, resp)
}
