// Code generated by hertz generator.

package favorite

import (
	"context"
	"gitee.com/derrickball/douyin/app/api/biz/handler/pack"
	"gitee.com/derrickball/douyin/app/api/biz/model/common"
	favorite "gitee.com/derrickball/douyin/app/api/biz/model/favorite"
	"gitee.com/derrickball/douyin/app/api/biz/rpc"
	"gitee.com/derrickball/douyin/app/favorite/kitex_gen/favorite_rpc"
	"gitee.com/derrickball/douyin/app/video/kitex_gen/video_rpc"
	"gitee.com/derrickball/douyin/pkg/constants"
	"gitee.com/derrickball/douyin/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/jwt"
	"log"
	"time"
)

// Action .
// @router /douyin/favorite/action/ [POST]
func Action(ctx context.Context, c *app.RequestContext) {
	log.Printf("--------------favorite点赞操作-------------, time is %v", time.Now())
	var err error
	var req favorite.FavoriteActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	claims := jwt.ExtractClaims(ctx, c)
	userID := int64(claims[constants.IdentityKey].(float64))
	log.Printf("userId = %d", userID)
	if *req.ActionType == favorite.FavoriteActionType_FAVORITE {
		err := rpc.CreateFavorite(ctx, &favorite_rpc.RPCFavoriteCreateReq{
			VideoId: *req.VideoId,
			UserId:  userID,
		})
		if err != nil {
			c.JSON(consts.StatusOK, errno.MConvertErr(err))
			return
		}
	} else if *req.ActionType == favorite.FavoriteActionType_CANCEL {
		err := rpc.DelFavorite(ctx, &favorite_rpc.RPCFavoriteDelReq{
			VideoId: *req.VideoId,
			UserId:  userID,
		})
		if err != nil {
			c.JSON(consts.StatusOK, errno.MConvertErr(err))
			return
		}
	}
	resp := &favorite.FavoriteActionResp{
		StatusCode: &errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
	}
	c.JSON(consts.StatusOK, resp)
}

// List .
// @router /douyin/favorite/list/ [GET]
func List(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.FavoriteListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	//claims := jwt.ExtractClaims(ctx, c)
	//userID := int64(claims[constants.IdentityKey].(float64))
	//log.Printf("userId = %d", userID)
	userID, _ := c.Get(constants.IdentityKey)

	if userID == nil {
		resp := &favorite.FavoriteListResp{
			StatusCode: &errno.Success.ErrCode,
			StatusMsg:  &errno.Success.ErrMsg,
			VideoList:  []*common.Video{},
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	//resp.CommentList = make([]*common.Comment, 0)
	videoIdList, err := rpc.FavoriteList(ctx, &favorite_rpc.RPCFavoriteListReq{
		UserId: userID.(int64),
	})
	if err != nil {
		c.JSON(consts.StatusOK, errno.MConvertErr(err))
		return
	}

	result, err := rpc.QueryVideoByIDBatch(ctx, &video_rpc.QueryVideoByVideoIdBatchReq{VideoID: videoIdList})

	resp := &favorite.FavoriteListResp{
		StatusCode: &errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
		VideoList:  pack.Videos(result),
	}

	c.JSON(consts.StatusOK, resp)
}
