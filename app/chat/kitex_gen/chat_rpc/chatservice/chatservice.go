// Code generated by Kitex v0.4.4. DO NOT EDIT.

package chatservice

import (
	"context"
	"fmt"
	chat_rpc "gitee.com/derrickball/douyin/app/chat/kitex_gen/chat_rpc"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return chatServiceServiceInfo
}

var chatServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChatService"
	handlerType := (*chat_rpc.ChatService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FriendList":    kitex.NewMethodInfo(friendListHandler, newFriendListArgs, newFriendListResult, false),
		"CreateMessage": kitex.NewMethodInfo(createMessageHandler, newCreateMessageArgs, newCreateMessageResult, false),
		"MessageList":   kitex.NewMethodInfo(messageListHandler, newMessageListArgs, newMessageListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(chat_rpc.RPCFriendListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(chat_rpc.ChatService).FriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FriendListArgs:
		success, err := handler.(chat_rpc.ChatService).FriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FriendListResult)
		realResult.Success = success
	}
	return nil
}
func newFriendListArgs() interface{} {
	return &FriendListArgs{}
}

func newFriendListResult() interface{} {
	return &FriendListResult{}
}

type FriendListArgs struct {
	Req *chat_rpc.RPCFriendListReq
}

func (p *FriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(chat_rpc.RPCFriendListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FriendListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FriendListArgs) Unmarshal(in []byte) error {
	msg := new(chat_rpc.RPCFriendListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FriendListArgs_Req_DEFAULT *chat_rpc.RPCFriendListReq

func (p *FriendListArgs) GetReq() *chat_rpc.RPCFriendListReq {
	if !p.IsSetReq() {
		return FriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FriendListResult struct {
	Success *chat_rpc.RPCFriendListResp
}

var FriendListResult_Success_DEFAULT *chat_rpc.RPCFriendListResp

func (p *FriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(chat_rpc.RPCFriendListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FriendListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FriendListResult) Unmarshal(in []byte) error {
	msg := new(chat_rpc.RPCFriendListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FriendListResult) GetSuccess() *chat_rpc.RPCFriendListResp {
	if !p.IsSetSuccess() {
		return FriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*chat_rpc.RPCFriendListResp)
}

func (p *FriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func createMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(chat_rpc.RPCMessageCreateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(chat_rpc.ChatService).CreateMessage(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateMessageArgs:
		success, err := handler.(chat_rpc.ChatService).CreateMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateMessageResult)
		realResult.Success = success
	}
	return nil
}
func newCreateMessageArgs() interface{} {
	return &CreateMessageArgs{}
}

func newCreateMessageResult() interface{} {
	return &CreateMessageResult{}
}

type CreateMessageArgs struct {
	Req *chat_rpc.RPCMessageCreateReq
}

func (p *CreateMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(chat_rpc.RPCMessageCreateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateMessageArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateMessageArgs) Unmarshal(in []byte) error {
	msg := new(chat_rpc.RPCMessageCreateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateMessageArgs_Req_DEFAULT *chat_rpc.RPCMessageCreateReq

func (p *CreateMessageArgs) GetReq() *chat_rpc.RPCMessageCreateReq {
	if !p.IsSetReq() {
		return CreateMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateMessageResult struct {
	Success *chat_rpc.RPCMessageCreateResp
}

var CreateMessageResult_Success_DEFAULT *chat_rpc.RPCMessageCreateResp

func (p *CreateMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(chat_rpc.RPCMessageCreateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateMessageResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateMessageResult) Unmarshal(in []byte) error {
	msg := new(chat_rpc.RPCMessageCreateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateMessageResult) GetSuccess() *chat_rpc.RPCMessageCreateResp {
	if !p.IsSetSuccess() {
		return CreateMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*chat_rpc.RPCMessageCreateResp)
}

func (p *CreateMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func messageListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(chat_rpc.RPCMessageChatReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(chat_rpc.ChatService).MessageList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *MessageListArgs:
		success, err := handler.(chat_rpc.ChatService).MessageList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MessageListResult)
		realResult.Success = success
	}
	return nil
}
func newMessageListArgs() interface{} {
	return &MessageListArgs{}
}

func newMessageListResult() interface{} {
	return &MessageListResult{}
}

type MessageListArgs struct {
	Req *chat_rpc.RPCMessageChatReq
}

func (p *MessageListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(chat_rpc.RPCMessageChatReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MessageListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MessageListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MessageListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in MessageListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *MessageListArgs) Unmarshal(in []byte) error {
	msg := new(chat_rpc.RPCMessageChatReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MessageListArgs_Req_DEFAULT *chat_rpc.RPCMessageChatReq

func (p *MessageListArgs) GetReq() *chat_rpc.RPCMessageChatReq {
	if !p.IsSetReq() {
		return MessageListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MessageListArgs) IsSetReq() bool {
	return p.Req != nil
}

type MessageListResult struct {
	Success *chat_rpc.RPCMessageChatResp
}

var MessageListResult_Success_DEFAULT *chat_rpc.RPCMessageChatResp

func (p *MessageListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(chat_rpc.RPCMessageChatResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MessageListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MessageListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MessageListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in MessageListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *MessageListResult) Unmarshal(in []byte) error {
	msg := new(chat_rpc.RPCMessageChatResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MessageListResult) GetSuccess() *chat_rpc.RPCMessageChatResp {
	if !p.IsSetSuccess() {
		return MessageListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MessageListResult) SetSuccess(x interface{}) {
	p.Success = x.(*chat_rpc.RPCMessageChatResp)
}

func (p *MessageListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FriendList(ctx context.Context, Req *chat_rpc.RPCFriendListReq) (r *chat_rpc.RPCFriendListResp, err error) {
	var _args FriendListArgs
	_args.Req = Req
	var _result FriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMessage(ctx context.Context, Req *chat_rpc.RPCMessageCreateReq) (r *chat_rpc.RPCMessageCreateResp, err error) {
	var _args CreateMessageArgs
	_args.Req = Req
	var _result CreateMessageResult
	if err = p.c.Call(ctx, "CreateMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageList(ctx context.Context, Req *chat_rpc.RPCMessageChatReq) (r *chat_rpc.RPCMessageChatResp, err error) {
	var _args MessageListArgs
	_args.Req = Req
	var _result MessageListResult
	if err = p.c.Call(ctx, "MessageList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
