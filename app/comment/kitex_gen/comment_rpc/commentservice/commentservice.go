// Code generated by Kitex v0.4.4. DO NOT EDIT.

package commentservice

import (
	"context"
	"fmt"
	comment_rpc "gitee.com/derrickball/douyin/app/comment/kitex_gen/comment_rpc"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment_rpc.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateComment": kitex.NewMethodInfo(createCommentHandler, newCreateCommentArgs, newCreateCommentResult, false),
		"DelComment":    kitex.NewMethodInfo(delCommentHandler, newDelCommentArgs, newDelCommentResult, false),
		"CommentList":   kitex.NewMethodInfo(commentListHandler, newCommentListArgs, newCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_rpc.RPCCommentCreateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_rpc.CommentService).CreateComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateCommentArgs:
		success, err := handler.(comment_rpc.CommentService).CreateComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateCommentResult)
		realResult.Success = success
	}
	return nil
}
func newCreateCommentArgs() interface{} {
	return &CreateCommentArgs{}
}

func newCreateCommentResult() interface{} {
	return &CreateCommentResult{}
}

type CreateCommentArgs struct {
	Req *comment_rpc.RPCCommentCreateReq
}

func (p *CreateCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_rpc.RPCCommentCreateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment_rpc.RPCCommentCreateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateCommentArgs_Req_DEFAULT *comment_rpc.RPCCommentCreateReq

func (p *CreateCommentArgs) GetReq() *comment_rpc.RPCCommentCreateReq {
	if !p.IsSetReq() {
		return CreateCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateCommentResult struct {
	Success *comment_rpc.RPCActionResp
}

var CreateCommentResult_Success_DEFAULT *comment_rpc.RPCActionResp

func (p *CreateCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_rpc.RPCActionResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateCommentResult) Unmarshal(in []byte) error {
	msg := new(comment_rpc.RPCActionResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateCommentResult) GetSuccess() *comment_rpc.RPCActionResp {
	if !p.IsSetSuccess() {
		return CreateCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_rpc.RPCActionResp)
}

func (p *CreateCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func delCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_rpc.RPCCommentDelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_rpc.CommentService).DelComment(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DelCommentArgs:
		success, err := handler.(comment_rpc.CommentService).DelComment(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DelCommentResult)
		realResult.Success = success
	}
	return nil
}
func newDelCommentArgs() interface{} {
	return &DelCommentArgs{}
}

func newDelCommentResult() interface{} {
	return &DelCommentResult{}
}

type DelCommentArgs struct {
	Req *comment_rpc.RPCCommentDelReq
}

func (p *DelCommentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_rpc.RPCCommentDelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DelCommentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DelCommentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DelCommentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DelCommentArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DelCommentArgs) Unmarshal(in []byte) error {
	msg := new(comment_rpc.RPCCommentDelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DelCommentArgs_Req_DEFAULT *comment_rpc.RPCCommentDelReq

func (p *DelCommentArgs) GetReq() *comment_rpc.RPCCommentDelReq {
	if !p.IsSetReq() {
		return DelCommentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DelCommentArgs) IsSetReq() bool {
	return p.Req != nil
}

type DelCommentResult struct {
	Success *comment_rpc.RPCActionResp
}

var DelCommentResult_Success_DEFAULT *comment_rpc.RPCActionResp

func (p *DelCommentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_rpc.RPCActionResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DelCommentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DelCommentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DelCommentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DelCommentResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DelCommentResult) Unmarshal(in []byte) error {
	msg := new(comment_rpc.RPCActionResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DelCommentResult) GetSuccess() *comment_rpc.RPCActionResp {
	if !p.IsSetSuccess() {
		return DelCommentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DelCommentResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_rpc.RPCActionResp)
}

func (p *DelCommentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(comment_rpc.RPCCommentListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(comment_rpc.CommentService).CommentList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommentListArgs:
		success, err := handler.(comment_rpc.CommentService).CommentList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommentListResult)
		realResult.Success = success
	}
	return nil
}
func newCommentListArgs() interface{} {
	return &CommentListArgs{}
}

func newCommentListResult() interface{} {
	return &CommentListResult{}
}

type CommentListArgs struct {
	Req *comment_rpc.RPCCommentListReq
}

func (p *CommentListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(comment_rpc.RPCCommentListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommentListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommentListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommentListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommentListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommentListArgs) Unmarshal(in []byte) error {
	msg := new(comment_rpc.RPCCommentListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommentListArgs_Req_DEFAULT *comment_rpc.RPCCommentListReq

func (p *CommentListArgs) GetReq() *comment_rpc.RPCCommentListReq {
	if !p.IsSetReq() {
		return CommentListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommentListArgs) IsSetReq() bool {
	return p.Req != nil
}

type CommentListResult struct {
	Success *comment_rpc.RPCCommentListResp
}

var CommentListResult_Success_DEFAULT *comment_rpc.RPCCommentListResp

func (p *CommentListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(comment_rpc.RPCCommentListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommentListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommentListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommentListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommentListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommentListResult) Unmarshal(in []byte) error {
	msg := new(comment_rpc.RPCCommentListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommentListResult) GetSuccess() *comment_rpc.RPCCommentListResp {
	if !p.IsSetSuccess() {
		return CommentListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommentListResult) SetSuccess(x interface{}) {
	p.Success = x.(*comment_rpc.RPCCommentListResp)
}

func (p *CommentListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateComment(ctx context.Context, Req *comment_rpc.RPCCommentCreateReq) (r *comment_rpc.RPCActionResp, err error) {
	var _args CreateCommentArgs
	_args.Req = Req
	var _result CreateCommentResult
	if err = p.c.Call(ctx, "CreateComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelComment(ctx context.Context, Req *comment_rpc.RPCCommentDelReq) (r *comment_rpc.RPCActionResp, err error) {
	var _args DelCommentArgs
	_args.Req = Req
	var _result DelCommentResult
	if err = p.c.Call(ctx, "DelComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, Req *comment_rpc.RPCCommentListReq) (r *comment_rpc.RPCCommentListResp, err error) {
	var _args CommentListArgs
	_args.Req = Req
	var _result CommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
