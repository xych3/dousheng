// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favoriteservice

import (
	"context"
	"fmt"
	favorite_rpc "gitee.com/derrickball/douyin/app/favorite/kitex_gen/favorite_rpc"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite_rpc.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateFavorite": kitex.NewMethodInfo(createFavoriteHandler, newCreateFavoriteArgs, newCreateFavoriteResult, false),
		"DelFavorite":    kitex.NewMethodInfo(delFavoriteHandler, newDelFavoriteArgs, newDelFavoriteResult, false),
		"FavoriteList":   kitex.NewMethodInfo(favoriteListHandler, newFavoriteListArgs, newFavoriteListResult, false),
		"FilterFavorite": kitex.NewMethodInfo(filterFavoriteHandler, newFilterFavoriteArgs, newFilterFavoriteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favorite_rpc.RPCFavoriteCreateReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favorite_rpc.FavoriteService).CreateFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateFavoriteArgs:
		success, err := handler.(favorite_rpc.FavoriteService).CreateFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newCreateFavoriteArgs() interface{} {
	return &CreateFavoriteArgs{}
}

func newCreateFavoriteResult() interface{} {
	return &CreateFavoriteResult{}
}

type CreateFavoriteArgs struct {
	Req *favorite_rpc.RPCFavoriteCreateReq
}

func (p *CreateFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(favorite_rpc.RPCFavoriteCreateReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favorite_rpc.RPCFavoriteCreateReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateFavoriteArgs_Req_DEFAULT *favorite_rpc.RPCFavoriteCreateReq

func (p *CreateFavoriteArgs) GetReq() *favorite_rpc.RPCFavoriteCreateReq {
	if !p.IsSetReq() {
		return CreateFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateFavoriteResult struct {
	Success *favorite_rpc.RPCFavoriteCreateResp
}

var CreateFavoriteResult_Success_DEFAULT *favorite_rpc.RPCFavoriteCreateResp

func (p *CreateFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(favorite_rpc.RPCFavoriteCreateResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favorite_rpc.RPCFavoriteCreateResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateFavoriteResult) GetSuccess() *favorite_rpc.RPCFavoriteCreateResp {
	if !p.IsSetSuccess() {
		return CreateFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favorite_rpc.RPCFavoriteCreateResp)
}

func (p *CreateFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func delFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favorite_rpc.RPCFavoriteDelReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favorite_rpc.FavoriteService).DelFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DelFavoriteArgs:
		success, err := handler.(favorite_rpc.FavoriteService).DelFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DelFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newDelFavoriteArgs() interface{} {
	return &DelFavoriteArgs{}
}

func newDelFavoriteResult() interface{} {
	return &DelFavoriteResult{}
}

type DelFavoriteArgs struct {
	Req *favorite_rpc.RPCFavoriteDelReq
}

func (p *DelFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(favorite_rpc.RPCFavoriteDelReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DelFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DelFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DelFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DelFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DelFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favorite_rpc.RPCFavoriteDelReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DelFavoriteArgs_Req_DEFAULT *favorite_rpc.RPCFavoriteDelReq

func (p *DelFavoriteArgs) GetReq() *favorite_rpc.RPCFavoriteDelReq {
	if !p.IsSetReq() {
		return DelFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DelFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type DelFavoriteResult struct {
	Success *favorite_rpc.RPCFavoriteDelResp
}

var DelFavoriteResult_Success_DEFAULT *favorite_rpc.RPCFavoriteDelResp

func (p *DelFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(favorite_rpc.RPCFavoriteDelResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DelFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DelFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DelFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DelFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DelFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favorite_rpc.RPCFavoriteDelResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DelFavoriteResult) GetSuccess() *favorite_rpc.RPCFavoriteDelResp {
	if !p.IsSetSuccess() {
		return DelFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DelFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favorite_rpc.RPCFavoriteDelResp)
}

func (p *DelFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favorite_rpc.RPCFavoriteListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favorite_rpc.FavoriteService).FavoriteList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FavoriteListArgs:
		success, err := handler.(favorite_rpc.FavoriteService).FavoriteList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FavoriteListResult)
		realResult.Success = success
	}
	return nil
}
func newFavoriteListArgs() interface{} {
	return &FavoriteListArgs{}
}

func newFavoriteListResult() interface{} {
	return &FavoriteListResult{}
}

type FavoriteListArgs struct {
	Req *favorite_rpc.RPCFavoriteListReq
}

func (p *FavoriteListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(favorite_rpc.RPCFavoriteListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FavoriteListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FavoriteListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FavoriteListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FavoriteListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FavoriteListArgs) Unmarshal(in []byte) error {
	msg := new(favorite_rpc.RPCFavoriteListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FavoriteListArgs_Req_DEFAULT *favorite_rpc.RPCFavoriteListReq

func (p *FavoriteListArgs) GetReq() *favorite_rpc.RPCFavoriteListReq {
	if !p.IsSetReq() {
		return FavoriteListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FavoriteListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FavoriteListResult struct {
	Success *favorite_rpc.RPCFavoriteListResp
}

var FavoriteListResult_Success_DEFAULT *favorite_rpc.RPCFavoriteListResp

func (p *FavoriteListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(favorite_rpc.RPCFavoriteListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FavoriteListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FavoriteListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FavoriteListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FavoriteListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FavoriteListResult) Unmarshal(in []byte) error {
	msg := new(favorite_rpc.RPCFavoriteListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FavoriteListResult) GetSuccess() *favorite_rpc.RPCFavoriteListResp {
	if !p.IsSetSuccess() {
		return FavoriteListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FavoriteListResult) SetSuccess(x interface{}) {
	p.Success = x.(*favorite_rpc.RPCFavoriteListResp)
}

func (p *FavoriteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func filterFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(favorite_rpc.RPCFilterFavoriteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(favorite_rpc.FavoriteService).FilterFavorite(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FilterFavoriteArgs:
		success, err := handler.(favorite_rpc.FavoriteService).FilterFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FilterFavoriteResult)
		realResult.Success = success
	}
	return nil
}
func newFilterFavoriteArgs() interface{} {
	return &FilterFavoriteArgs{}
}

func newFilterFavoriteResult() interface{} {
	return &FilterFavoriteResult{}
}

type FilterFavoriteArgs struct {
	Req *favorite_rpc.RPCFilterFavoriteReq
}

func (p *FilterFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(favorite_rpc.RPCFilterFavoriteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FilterFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FilterFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FilterFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FilterFavoriteArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FilterFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(favorite_rpc.RPCFilterFavoriteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FilterFavoriteArgs_Req_DEFAULT *favorite_rpc.RPCFilterFavoriteReq

func (p *FilterFavoriteArgs) GetReq() *favorite_rpc.RPCFilterFavoriteReq {
	if !p.IsSetReq() {
		return FilterFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FilterFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

type FilterFavoriteResult struct {
	Success *favorite_rpc.RPCFilterFavoriteResp
}

var FilterFavoriteResult_Success_DEFAULT *favorite_rpc.RPCFilterFavoriteResp

func (p *FilterFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(favorite_rpc.RPCFilterFavoriteResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FilterFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FilterFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FilterFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FilterFavoriteResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FilterFavoriteResult) Unmarshal(in []byte) error {
	msg := new(favorite_rpc.RPCFilterFavoriteResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FilterFavoriteResult) GetSuccess() *favorite_rpc.RPCFilterFavoriteResp {
	if !p.IsSetSuccess() {
		return FilterFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FilterFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*favorite_rpc.RPCFilterFavoriteResp)
}

func (p *FilterFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateFavorite(ctx context.Context, Req *favorite_rpc.RPCFavoriteCreateReq) (r *favorite_rpc.RPCFavoriteCreateResp, err error) {
	var _args CreateFavoriteArgs
	_args.Req = Req
	var _result CreateFavoriteResult
	if err = p.c.Call(ctx, "CreateFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelFavorite(ctx context.Context, Req *favorite_rpc.RPCFavoriteDelReq) (r *favorite_rpc.RPCFavoriteDelResp, err error) {
	var _args DelFavoriteArgs
	_args.Req = Req
	var _result DelFavoriteResult
	if err = p.c.Call(ctx, "DelFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, Req *favorite_rpc.RPCFavoriteListReq) (r *favorite_rpc.RPCFavoriteListResp, err error) {
	var _args FavoriteListArgs
	_args.Req = Req
	var _result FavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FilterFavorite(ctx context.Context, Req *favorite_rpc.RPCFilterFavoriteReq) (r *favorite_rpc.RPCFilterFavoriteResp, err error) {
	var _args FilterFavoriteArgs
	_args.Req = Req
	var _result FilterFavoriteResult
	if err = p.c.Call(ctx, "FilterFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
