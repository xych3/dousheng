// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	"fmt"
	relation_rpc "gitee.com/derrickball/douyin/app/relation/kitex_gen/relation_rpc"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation_rpc.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Action":       kitex.NewMethodInfo(actionHandler, newActionArgs, newActionResult, false),
		"FollowList":   kitex.NewMethodInfo(followListHandler, newFollowListArgs, newFollowListResult, false),
		"FollowerList": kitex.NewMethodInfo(followerListHandler, newFollowerListArgs, newFollowerListResult, false),
		"CheckFollow":  kitex.NewMethodInfo(checkFollowHandler, newCheckFollowArgs, newCheckFollowResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation_rpc.RPCRelationActionReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation_rpc.RelationService).Action(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ActionArgs:
		success, err := handler.(relation_rpc.RelationService).Action(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ActionResult)
		realResult.Success = success
	}
	return nil
}
func newActionArgs() interface{} {
	return &ActionArgs{}
}

func newActionResult() interface{} {
	return &ActionResult{}
}

type ActionArgs struct {
	Req *relation_rpc.RPCRelationActionReq
}

func (p *ActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation_rpc.RPCRelationActionReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ActionArgs) Unmarshal(in []byte) error {
	msg := new(relation_rpc.RPCRelationActionReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ActionArgs_Req_DEFAULT *relation_rpc.RPCRelationActionReq

func (p *ActionArgs) GetReq() *relation_rpc.RPCRelationActionReq {
	if !p.IsSetReq() {
		return ActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type ActionResult struct {
	Success *relation_rpc.RPCRelationActionResp
}

var ActionResult_Success_DEFAULT *relation_rpc.RPCRelationActionResp

func (p *ActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation_rpc.RPCRelationActionResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ActionResult) Unmarshal(in []byte) error {
	msg := new(relation_rpc.RPCRelationActionResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ActionResult) GetSuccess() *relation_rpc.RPCRelationActionResp {
	if !p.IsSetSuccess() {
		return ActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation_rpc.RPCRelationActionResp)
}

func (p *ActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation_rpc.RPCRelationFollowListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation_rpc.RelationService).FollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowListArgs:
		success, err := handler.(relation_rpc.RelationService).FollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowListResult)
		realResult.Success = success
	}
	return nil
}
func newFollowListArgs() interface{} {
	return &FollowListArgs{}
}

func newFollowListResult() interface{} {
	return &FollowListResult{}
}

type FollowListArgs struct {
	Req *relation_rpc.RPCRelationFollowListReq
}

func (p *FollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation_rpc.RPCRelationFollowListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowListArgs) Unmarshal(in []byte) error {
	msg := new(relation_rpc.RPCRelationFollowListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowListArgs_Req_DEFAULT *relation_rpc.RPCRelationFollowListReq

func (p *FollowListArgs) GetReq() *relation_rpc.RPCRelationFollowListReq {
	if !p.IsSetReq() {
		return FollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FollowListResult struct {
	Success *relation_rpc.RPCRelationFollowListResp
}

var FollowListResult_Success_DEFAULT *relation_rpc.RPCRelationFollowListResp

func (p *FollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation_rpc.RPCRelationFollowListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowListResult) Unmarshal(in []byte) error {
	msg := new(relation_rpc.RPCRelationFollowListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowListResult) GetSuccess() *relation_rpc.RPCRelationFollowListResp {
	if !p.IsSetSuccess() {
		return FollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation_rpc.RPCRelationFollowListResp)
}

func (p *FollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation_rpc.RPCRelationFollowerListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation_rpc.RelationService).FollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowerListArgs:
		success, err := handler.(relation_rpc.RelationService).FollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newFollowerListArgs() interface{} {
	return &FollowerListArgs{}
}

func newFollowerListResult() interface{} {
	return &FollowerListResult{}
}

type FollowerListArgs struct {
	Req *relation_rpc.RPCRelationFollowerListReq
}

func (p *FollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation_rpc.RPCRelationFollowerListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowerListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowerListArgs) Unmarshal(in []byte) error {
	msg := new(relation_rpc.RPCRelationFollowerListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowerListArgs_Req_DEFAULT *relation_rpc.RPCRelationFollowerListReq

func (p *FollowerListArgs) GetReq() *relation_rpc.RPCRelationFollowerListReq {
	if !p.IsSetReq() {
		return FollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

type FollowerListResult struct {
	Success *relation_rpc.RPCRelationFollowerListResp
}

var FollowerListResult_Success_DEFAULT *relation_rpc.RPCRelationFollowerListResp

func (p *FollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation_rpc.RPCRelationFollowerListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowerListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowerListResult) Unmarshal(in []byte) error {
	msg := new(relation_rpc.RPCRelationFollowerListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowerListResult) GetSuccess() *relation_rpc.RPCRelationFollowerListResp {
	if !p.IsSetSuccess() {
		return FollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation_rpc.RPCRelationFollowerListResp)
}

func (p *FollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func checkFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation_rpc.RPCCheckFollowReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation_rpc.RelationService).CheckFollow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckFollowArgs:
		success, err := handler.(relation_rpc.RelationService).CheckFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckFollowResult)
		realResult.Success = success
	}
	return nil
}
func newCheckFollowArgs() interface{} {
	return &CheckFollowArgs{}
}

func newCheckFollowResult() interface{} {
	return &CheckFollowResult{}
}

type CheckFollowArgs struct {
	Req *relation_rpc.RPCCheckFollowReq
}

func (p *CheckFollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation_rpc.RPCCheckFollowReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckFollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckFollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckFollowArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckFollowArgs) Unmarshal(in []byte) error {
	msg := new(relation_rpc.RPCCheckFollowReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckFollowArgs_Req_DEFAULT *relation_rpc.RPCCheckFollowReq

func (p *CheckFollowArgs) GetReq() *relation_rpc.RPCCheckFollowReq {
	if !p.IsSetReq() {
		return CheckFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

type CheckFollowResult struct {
	Success *relation_rpc.RPCCheckFollowResp
}

var CheckFollowResult_Success_DEFAULT *relation_rpc.RPCCheckFollowResp

func (p *CheckFollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation_rpc.RPCCheckFollowResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckFollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckFollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckFollowResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckFollowResult) Unmarshal(in []byte) error {
	msg := new(relation_rpc.RPCCheckFollowResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckFollowResult) GetSuccess() *relation_rpc.RPCCheckFollowResp {
	if !p.IsSetSuccess() {
		return CheckFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation_rpc.RPCCheckFollowResp)
}

func (p *CheckFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Action(ctx context.Context, Req *relation_rpc.RPCRelationActionReq) (r *relation_rpc.RPCRelationActionResp, err error) {
	var _args ActionArgs
	_args.Req = Req
	var _result ActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, Req *relation_rpc.RPCRelationFollowListReq) (r *relation_rpc.RPCRelationFollowListResp, err error) {
	var _args FollowListArgs
	_args.Req = Req
	var _result FollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, Req *relation_rpc.RPCRelationFollowerListReq) (r *relation_rpc.RPCRelationFollowerListResp, err error) {
	var _args FollowerListArgs
	_args.Req = Req
	var _result FollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckFollow(ctx context.Context, Req *relation_rpc.RPCCheckFollowReq) (r *relation_rpc.RPCCheckFollowResp, err error) {
	var _args CheckFollowArgs
	_args.Req = Req
	var _result CheckFollowResult
	if err = p.c.Call(ctx, "CheckFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
