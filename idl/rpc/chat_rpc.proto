syntax = "proto3";
package chat;
option go_package = "chat_rpc";

message RPCMessage {
  int64 id = 1; // 消息id
  int64 to_user_id = 2; // 该消息接收者的id
  int64 from_user_id =3; // 该消息发送者的id
  string content = 4; // 消息内容
  int64 create_time = 5; // 消息创建时间
}

message RPCFriendUser {
  int64 id = 1; // 用户id
  string name = 2; // 用户名称
  int64 follow_count = 3; // 关注总数
  int64 follower_count = 4; // 粉丝总数
  bool is_follow = 5; // true-已关注，false-未关注
  string avatar = 6; // 用户头像Url
  string message = 7; // 和该好友的最新聊天消息
  int64 msgType = 8; // message消息的类型，0 => 当前请求用户接收的消息， 1 => 当前请求用户发送的消息
}

message BaseResp {
  int32 status_code = 1;
  string status_message = 2;
  int64 service_time = 3;
}

message RPCFriendListReq {
  int64 user_id = 1;
}

message RPCFriendListResp {
  BaseResp base_resp = 1;
  repeated RPCFriendUser user_list = 2;
}

message RPCMessageCreateReq {
  int64 to_user_id = 1;
  int64 from_user_id = 2;
  string content = 3;
}

message RPCMessageCreateResp {
  BaseResp base_resp = 1;
  RPCMessage message = 2;
}

message RPCMessageChatReq {
  int64 to_user_id = 1;
  int64 user_id = 2;
}

message RPCMessageChatResp {
  BaseResp base_resp = 1;
  repeated RPCMessage message_list = 2;
}

service ChatService {
  rpc FriendList(RPCFriendListReq) returns(RPCFriendListResp);
  rpc CreateMessage(RPCMessageCreateReq) returns(RPCMessageCreateResp);
  rpc MessageList(RPCMessageChatReq) returns(RPCMessageChatResp);
}